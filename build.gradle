// The top-level project is used to generate javadoc.

plugins {
    id 'java-library'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

// Disable jar for top-level project
tasks.named('jar') {
    enabled = false
}

// Generate javadoc for all modules
tasks.named('javadoc', Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'

    // Prevent "too many module declarations found" javadoc error
    exclude "**/module-info.java"

    source subprojects.collect {
        it.sourceSets.main.allJava
    }

    // Set the --add-modules and --module-path parameters for the external dependencies
    options.addStringOption('-add-modules', 'org.jetbrains.annotations,org.freedesktop.cairo')
    classpath = files(subprojects.collect {
        it.sourceSets.main.compileClasspath.filter(file -> {
            def path = file.getAbsolutePath()
            return path.contains('/org.jetbrains/annotations/')
                || path.contains('/io.github.jwharm.cairobindings/cairo/')
                || path.contains('\\org.jetbrains\\annotations\\')
                || path.contains('\\io.github.jwharm.cairobindings\\cairo\\')
        })
    })

    // Ensure all source code is generated before the Javadoc task starts
    subprojects.forEach {
        dependsOn it.tasks.named('generateSources')
    }
}
